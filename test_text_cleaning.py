#!/usr/bin/env python3
"""
Test script for text cleaning functionality
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from utils.extractors import clean_extracted_text

def test_text_cleaning():
    """Test the text cleaning functionality"""
    
    print("üßπ Testing Text Cleaning Functionality")
    print("=" * 50)
    
    # Test cases with backslashes and pipe symbols
    test_cases = [
        {
            "input": "Material certificates\\for all|metallic/non-metallic|product contact parts.",
            "description": "Certificate requirement with backslashes and pipes"
        },
        {
            "input": "Test\\report|2.2 will\\be provided",
            "description": "Test report comment with backslashes and pipes"
        },
        {
            "input": "The system\\must|be able\\to|prevent unauthorized\\access",
            "description": "Security requirement with mixed separators"
        },
        {
            "input": "Documentation\\|Requirements|\\Section 5.1",
            "description": "Section header with mixed separators"
        },
        {
            "input": "   Multiple   \\\\  spaces  ||  and   tabs\t\t",
            "description": "Text with excessive whitespace, backslashes, and pipes"
        },
        {
            "input": "|\\Start with separators and\\|end with them|\\",
            "description": "Text starting and ending with separators"
        }
    ]
    
    print("üîç Testing Cases:")
    print("-" * 30)
    
    for i, case in enumerate(test_cases, 1):
        input_text = case["input"]
        cleaned_text = clean_extracted_text(input_text)
        
        print(f"\n{i}. {case['description']}")
        print(f"   Input:   '{input_text}'")
        print(f"   Cleaned: '{cleaned_text}'")
        
        # Check if cleaning worked
        has_backslash = "\\" in cleaned_text
        has_pipe = "|" in cleaned_text
        
        if has_backslash or has_pipe:
            print(f"   ‚ö†Ô∏è  Warning: Still contains \\ or | characters")
        else:
            print(f"   ‚úÖ Successfully cleaned")
    
    print("\n" + "=" * 50)
    print("üìã Summary of Cleaning Features:")
    print("‚Ä¢ Removes backslashes (\\)")
    print("‚Ä¢ Removes pipe symbols (|)")
    print("‚Ä¢ Normalizes whitespace")
    print("‚Ä¢ Removes double spaces")
    print("‚Ä¢ Removes tabs")
    print("‚Ä¢ Strips leading/trailing whitespace")
    
    print("\nüéØ Applied to All Extraction Points:")
    print("‚Ä¢ PDF text extraction (line-by-line)")
    print("‚Ä¢ PDF annotation content")
    print("‚Ä¢ DOCX paragraph text")
    print("‚Ä¢ DOCX comment text")
    print("‚Ä¢ DOCX table cell content")
    print("‚Ä¢ XLSX cell content")
    print("‚Ä¢ Table extraction from all formats")
    print("‚Ä¢ OCR text output")
    
    print("\n‚ú® Your documents will now have cleaner, more readable text!")

if __name__ == "__main__":
    test_text_cleaning()